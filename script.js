document.addEventListener("DOMContentLoaded", () => {
    
    // ===================== AFFICHER / CACHER LE HEADER SELON DE SCROLL =====================//

    let scroll = 0;                                                                                 // On part de 0

    const header = document.getElementById('header');                                               // R√©cup√®re l'ID header
    const burger = document.querySelector('.burger');                                               // R√©cup√®re le burger menu
    const headerLeft = document.querySelector('.header-left');                                      // R√©cup√®re la partie gauche du header
    const closeBtn = document.querySelector('.close-btn');                                          // R√©cup√®re le bouton de fermeture

    window.addEventListener('scroll', function() {                                                  // Ecoute quand il y a un scroll dans la fen√™tre
        const currentScroll = window.pageYOffset;                                                   // R√©cup√®re la position actuelle de scroll

        if (currentScroll > scroll && !headerLeft.classList.contains('open')) {                     // Si je scroll vers le bas et que le header gauche a la class 'open'
            header.classList.add('hide');                                                           // Cache le header

        } else if (currentScroll < scroll) {                                                        // Sinon si je scroll vers le haut
            header.classList.remove('hide');                                                        // Affiche le header
        }
        scroll = currentScroll;                                                                     // Met √† jour la position du scroll 
    });

    function updateHeaderBackgroundOnScroll() {                                                     // Function pour afficher un background colors sur le header (uniquement mobile)
        const isMobile = window.innerWidth < 1260;                                                  // V√©rifie si on est en mobile
        const hasScrolledPastBanner = window.scrollY > window.innerHeight;                          // V√©rifie si on a d√©pass√© la banni√®re

        if (isMobile && hasScrolledPastBanner) {                                                    // Si on est en mobile et qu'on a d√©pass√© la banni√®re
            header.style.backgroundColor = '#363A2B';                                               // Le backgroundColor du header sera '#363A2B'
        } else if (isMobile && !hasScrolledPastBanner) {                                            // Sinon si on est en mobile mais qu'on a pas d√©pass√© la banni√®re
            header.style.backgroundColor = 'transparent';                                           // Le backgroundColor du header sera 'transparent'
        } else {                                                                                    // Sinon
            header.style.backgroundColor = '#E5E0DC';                                               // On est en deskop donc backgroundColor '#E5E0DC'
        }
    }

    window.addEventListener('scroll', updateHeaderBackgroundOnScroll);                              // Appel la function √† chaque scoll
    window.addEventListener('resize', updateHeaderBackgroundOnScroll);                              // Appel la function √† chaque redimension de la page


    // ===================== AFFICHER DANS LE HEADER LA PAGE ACTUEL =====================//

    const currentPage = window.location.pathname.split("/").pop();                                  // R√©cup√®re le nom du fichier de la page actuelle (ex: "feu.html")
    const navLinks = document.querySelectorAll("nav a");                                            // S√©lectionne tous les liens de navigation dans le header
    
    for (let i = 0; i < navLinks.length; i++) {                                                     // Parcourt tous les liens de navigation
        const link = navLinks[i];                                                                   // R√©cup√®re le lien actuel
        const href = link.getAttribute("href").split("/").pop();                                    // R√©cup√®re uniquement le nom de fichier du lien (ex: "feu.html")
    
        console.log("üîé Test lien : " + href + " VS page : " + currentPage);                        // (Debug avec la console) Confirme que le lien est bon
    
        if (href === currentPage) {                                                                 // Si le lien correspond √† la page actuelle
            link.classList.add("active");                                                           // Ajoute la classe "active" au lien
            console.log("‚úÖ Lien actif d√©tect√© : " + href);                                         // (Debug avec la console) Confirme dans la console que le lien actif a √©t√© trouv√©
            break;                                                                                  // Stoppe la boucle
        }                                                                            ///////////////// Probablement incompatible avec GitHubPage a cause de chemin du lien
    }

    // ===================== BOUTON BURGER =====================//

    burger.addEventListener('click', function () {                                                  // Ecoute quand il y a un clique sur le burger                                           
        headerLeft.classList.toggle('open');                                                        // Ouvre le header gauche 

        if (headerLeft.classList.contains('open')) {                                                // Si le header gauche a la class 'open'                                     
            closeBtn.style.display = 'block';                                                       // Fais appara√Ætre le bouton 'fermer'
        }
    });

    closeBtn.addEventListener('click', function () {                                                // Quand on clique sur le bouton 'fermer'
        headerLeft.classList.remove('open');                                                        // Le 'headerLeft' se cache                                              
    });


    // ===================== CHANGER D'IMAGE POUR LES CAROUSEL =====================//

    const carousels = document.querySelectorAll(".carousel");                                       // R√©cup√®re tous les ID 'carousel√©

    carousels.forEach(function (carousel) {                                                         // Parcourt chaque carousel trouv√© sur la page
        const images = carousel.querySelectorAll(".carousel-img");                                  // R√©cup√®re toutes les images √† l'int√©rieur du carousel
        let currentImage = 0;                                                                       // Initialise l'index de l'image affich√©e √† 0

        images.forEach(function (img, i) {
            img.addEventListener("click", function () {                                             // Ajoute un √©couteur de clic sur chaque image
                currentImage = (i + 1) % images.length;                                             // Passe √† l'image suivante (ou revient √† la premi√®re si on est √† la fin)

                const nextImage = images[currentImage];                                             // R√©cup√®re la prochaine image
                carousel.scrollTo({                                                                 // Scroll entre chaque images                                           
                left: nextImage.offsetLeft - carousel.offsetLeft,                                   // Calcule la position de l'image cible par rapport au d√©but du carousel
                behavior: "smooth"                                                                  // Applique un d√©filement fluide
                });
            });
        });
    });

    // ===================== SCROLL AU SUIVI DE LA SOURIS SUR SERVICE-LIST =====================//

    const listeServices = document.querySelectorAll(".service-list");                               // R√©cup√®re le conteneur des cartes service
    console.log(listeServices);

    let sourisAppuyee = false;                                                                      // Est-ce que la souris est enfonc√©e ? Initialement non
    let positionDepartX;                                                                            // Position X au moment du clic
    let scrollInitial;                                                                              // Position de scroll avant le d√©placement

    listeServices.forEach((list) => {
        list.addEventListener("mousedown", function (e) {
            sourisAppuyee = true;                                                                   // Active le glissement
            list.classList.add("drag");                                                             // Change le curseur de la souris
            positionDepartX = e.pageX - list.offsetLeft;                                            // Enregistre la position X du clic
            scrollInitial = list.scrollLeft;                                                        // Enregistre le scroll de base
        });

        list.addEventListener("mouseleave", function () {                                           // Ecoute si la souris sort
            sourisAppuyee = false;                                                                  // Si la souris sort, on arr√™te
            list.classList.remove("drag");                                                          // Change le curseur de la souris
        });

        list.addEventListener("mouseup", function () {                                              // Ecoute si la souris est appuy√©
            sourisAppuyee = false;                                                                  // Quand on rel√¢che, on arr√™te
            list.classList.remove("drag");                                                          // Change le curseur de la souris
        });

        list.addEventListener("mousemove", function (e) {                                           // Ecoute si la souris bouge
            if (!sourisAppuyee)                                                                     // Si on ne clique pas,
            return;                                                                                 // Rien ne se passe
            console.log(e);
            const positionX = e.pageX - list.offsetLeft;                                            // Nouvelle position X (en fonction de la distance)
            const distance = (positionX - positionDepartX) * 1.5;                                   // Calcule la distance de glissement (x1.5 pour augmenter la vitesse)
            list.scrollLeft = scrollInitial - distance;                                             // Scroll le conteneur selon le mouvement
        });
    });

    // ===================== GESTION DE L'OUVERTURE ET FERMETURE DE LA MODALE =====================//

    const openModalBtns = document.querySelectorAll(".open-modal-btn");
    const modalOverlay = document.querySelector(".modal-overlay");
    const modalCloseBtn = document.querySelector(".modal-close");
    const modalHotelSelect = document.querySelector(".modal select#hotel"); // s√©lectionne le bon <select>
    
    openModalBtns.forEach((btn) => {
        btn.addEventListener("click", () => {
            modalOverlay.classList.add("active");
            document.body.style.overflow = "hidden";
    
            const selectedHotel = btn.getAttribute("data-hotel");
            if (selectedHotel && modalHotelSelect) {
                modalHotelSelect.value = selectedHotel;
            }
        });
    });
    
    modalCloseBtn.addEventListener("click", () => {
        modalOverlay.classList.remove("active");
        document.body.style.overflow = "auto";
    });
    

    // ===================== GESTION DU FORMULAIRE =====================//

    const form = document.querySelector(".modal form");                                                    // R√©cup√®re le formulaire
    form.addEventListener("submit", function (e) {                                                  // Ecoute quand il est envoy√©
        e.preventDefault();                                                                         // Emp√™che le rechargement de la page
        removeErrors();                                                                             // Appel la fonction removeErrors 

        const errors = [];                                                                          // Cr√©e un tableau d'erreur

        const firstname = form.querySelector('#nom');                                           // R√©cup√®re le nom
        const name = form.querySelector('#prenom');                                             // R√©cup√®re le prenom
        const email = form.querySelector('#email');                                             // R√©cup√®re l'√©mail
        const phone = form.querySelector('#tel');                                               // R√©cup√®re le t√©l√©phone
        const people = form.querySelector('#personnes');                                        // R√©cup√®re le nombre de personnes
        const hotel = form.querySelector('#hotel')                                              // R√©cup√®re l'hotel
        const arrival = form.querySelector('#arrivee');                                         // R√©cup√®re la date d'arriv√©e
        const depart = form.querySelector('#depart');                                           // R√©cup√®re la date de d√©part
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;                                            // Format Regex de l'√©mail
        const phoneRegex = /^(\+?\d{1,3}[-.\s]?)?\d{9,12}$/;                                        // Format Regex du num√©ro de t√©l√©phone

        if (firstname.value.trim().length < 2 || firstname.value.trim().length > 50) {                              // Si la valeur est inf√©rieur a 2 ou sup√©rieur a 50
            errors.push({ element: firstname, message: "Le pr√©nom doit contenir entre 2 et 50 caract√®res." });      // Renvoie l'erreur "..." 
        }

        if (name.value.trim().length < 2 || name.value.trim().length > 50) {                                        // Si la valeur est inf√©rieur a 2 ou sup√©rieur a 50
            errors.push({ element: name, message: "Le pr√©nom doit contenir entre 2 et 50 caract√®res." });           // Renvoie l'erreur "..." 
        }

        if (!emailRegex.test(email.value.trim())) {                                                                 // Si le format de l'√©mail ne respecte pas le Regex
            errors.push({ element: email, message: "Adresse email invalide." });                                    // Renvoie l'erreur "..." 
        }

        if (!phoneRegex.test(phone.value.trim())) {                                                                 // Si le format du t√©l√©phone ne respecte pas le Regex
            errors.push({ element: phone, message: "Num√©ro de t√©l√©phone invalide." });                              // Renvoie l'erreur "..." 
        }

        if (hotel.value === "") {                                                                                   // Si la valeur de hotel est vide
            errors.push({ element: hotel, message: "Veuillez choisir votre hotel." });                              // Renvoie l'erreur "..." 
        }

        if (people.value < 1 || people.value > 10 || people.value === "") {                                         // Si le nombre de personne est < √† 1 ou > √† 10 ou vide
            errors.push({ element: people, message: "Le nombre de personnes doit √™tre entre 1 et 10." });           // Renvoie l'erreur "..."
        }

        if (!arrival.value || !depart.value) {                                                                      // Si il n'y a pas de date d'arriv√©e ou de d√©part
            errors.push({ element: arrival, message: "Veuillez indiquer une date d'arriv√©e." });                    // Renvoie l'erreur "..." 
            errors.push({ element: depart, message: "Veuillez indiquer une date de d√©part." });                     // Renvoie l'erreur "..." 
        }

        if (new Date(arrival.value) > new Date(depart.value)) {                                                                     // Si la date d'arriv√© est > a la date de d√©part
            errors.push({element: depart, message: "La date d'arriv√©e ne peut pas √™tre post√©rieure √† la date de d√©part." });        // Renvoie l'erreur "..." 
        }
        

        if (errors.length > 0) {                                                                                    // Si le nombre d'erreur est sup√©rieur √† 0
            errors.forEach(err => showError(err.element, err.message));                                             // Pour chaque erreur, affiche l√†
            return;                                                                                                 
        }

        // ===== Cr√©er et afficher le message de succ√®s ===== //
        const successMsg = document.createElement("div");                                                           // Cr√©e une div
        successMsg.textContent = "R√©servation envoy√©e avec succ√®s ‚úÖ";                                              // Importe le texte "..."
        successMsg.className = "success-message";                                                                   // Donne la class "success-message"
        form.parentNode.insertBefore(successMsg, form);                                                             // L'importe au-dessus du form

        console.log("‚úÖ Message de succ√®s ins√©r√© !");

        // Masquer le formulaire 
        form.style.opacity = "0.5";                                                                                 // L'opacit√© du form passe a 0.5
        form.style.pointerEvents = "none";                                                                          // Empeche le clique sur le formulaire

    });

    function showError(element, message) {                                                                          // Function pour afficher les erreurs
        const error = document.createElement("div");                                                                // Cr√©e une div quand il y a une erreur
        error.className = "error";                                                                                  // Ajoute la class error
        error.style.color = "red";                                                                                  // Applique la couleur rouge
        error.textContent = message;                                                                                // Affiche le message ad√©quat
        element.parentNode.insertBefore(error, element.nextSibling);                                                // Inset l'erreur sous l'√©l√©menst cible
    }

    function removeErrors() {                                                                                       // Function pour effacer les erreurs
        document.querySelectorAll(".error").forEach(function (e) {                                                  // Parcours chaque erreurs
            e.remove();                                                                                             // Quand une est touv√©, efface l√†
        });
    }

    const resetBtn = document.querySelector(".reset-btn");                                                          // R√©cup√®re le bouton pour remettre a 0 le formulaire
    resetBtn.addEventListener("click", function () {                                                                // Ecoute quand on clique dessus
        removeErrors();                                                                                             // Appel la fonction pour effacer les erreurs
        const form = document.querySelector(".modal form");                                                                // R√©cup√®re le formulaire
        form.reset();                                                                                               // Remet le √† 0
    });   
});
